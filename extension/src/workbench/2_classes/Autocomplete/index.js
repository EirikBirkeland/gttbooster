// Copyright Â© 2016 Eirik Birkeland. All rights reserved.
/**
 * Created by eb on 08.09.2016.
 */


import $ from 'jquery'
import initCustomPlaceholderInsertion from './moveCursorForPlaceholders'
import source from './source'
import select from './select'
import _ from 'lodash'

// Require('cth-prototype')

const debug = require('cth-debug')(__filename.replace(/^src\//, ''))

const Autocomplete = {
   init,
   "destroy": function destroy () {
      $(window.cth.dom.targetDoc).find('#transEditor').autocomplete('destroy')
   }
}

function init (tmOpts) {
   const minLength = window.cth.option.autocompleteMinLength.length
      ? window.cth.option.autocompleteMinLength[1]
      : 2

   // Window.cth.minLength = minLength

   $.widget('app.autocomplete', $.ui.autocomplete, {

      /*
       * The _renderItem() method is responsible for rendering each
       * menu item in the autocomplete menu.
       */
      _renderItem (ul, item) {
         debug.log('item: ', item)

         // We want the rendered menu item generated by the default implementation.
         const result = this._super(ul, item)

         /*
          * If there is logo data, add our custom CSS class, and the specific
          * logo URL.
          */

         const colorToBootstrap = {
            "grey": 'default',
            "darkblue": 'primary',
            "blue": 'info',
            "green": 'success',
            "orange": 'warning',
            "red": 'danger'
         }

         const span = $('<span/>').addClass('bootstrap-wrapper').append($('<span/>').css({'margin-right': '2px'}).addClass(`label label-${colorToBootstrap[item.color]}`).html(item.type))

         result.find('div').prepend(span)

         return result
      }

   })

   window.tmOpts = tmOpts

   // TODO: Custom HTML select: https://jqueryui.com/autocomplete/#custom-data
   const $transEditor = $(window.cth.dom.targetDoc).find('#transEditor')
   const delay = 5000

   if ($transEditor.length) {
      activateAutocomplete()
      initCustomPlaceholderInsertion()
   } else {
      debug.log(`The translation editor was not available. Trying again in ${delay / 1000} seconds`)
      setTimeout(init, delay)
   }

   function activateAutocomplete () {
      $(window.cth.dom.targetDoc).find('#transEditor').autocomplete({
         minLength,
         "multiple": true,
         "autoFocus": true,
         "delay": 50,
         source,
         focus () {
            // Prevent value inserted on focus
            return false
         },
         select // SelectFnNew
      })

      $(window.cth.dom.targetDoc).find('#transEditor')[0].addEventListener('keydown', (event) => {
         if (event.keyCode && (event.keyCode === 37 || event.keyCode === 39)) {
            debug.log('CLOSING')

            _.defer(() => {
               $(window.cth.dom.targetDoc).find('#transEditor').autocomplete('close')
            })
         }
      })

      /**
       * Checks whether the autocomplete menu is visible to the user
       * @returns {boolean}
       */
      function autocompleteMenuIsOpen () {
         return $(cth.dom.targetDoc).find('.ui-autocomplete').css('display') === ''
      }
   }
}

export default Autocomplete
